@startuml bmail

title Bmail Project - Class Diagram

package App {
  class App {
    - commands: unordered_map<int, unique_ptr<ICommand>>
    - filter: shared_ptr<IFilter>
    - menu: unique_ptr<IMenu>
    + App()
    + run(reader: InputReader&, writer: OutputWriter&): void
    - semiConstructor(reader: InputReader&, writer: OutputWriter&): void
    - registerCommands(writer: OutputWriter&): void
    - parseInput(input: string, args: vector<int>&): void
    - hashAssembler(args: vector<int>&, out: vector<shared_ptr<IHashFunction>>&): void
    - isValidInit(input: string): bool
  }
}

package Filter {
  interface IFilter {
    + ~IFilter()
    + add(item: string): bool
    + delete(item: string): bool
    + isBlacklisted(item: string): bool
  }
  
  class BloomFilter {
    - bitArray: vector<bool>
    - arraySize: size_t
    - hashFunctions: vector<shared_ptr<IHashFunction>>
    - realBlacklist: unordered_set<string>
    + BloomFilter(size, hashFunctions)
    + add(item: string): bool
    + delete(item: string): bool
    + isBlacklisted(item: string): bool
    + loadFromFile(directory: string): void
    + saveToFile(directory: string): void
  }
}

package Hash {
  interface IHashFunction {
    + ~IHashFunction()
    + hash(key: string): size_t
  }
  
  class StdHash {
    - repetition: int
    + StdHash(repetition)
    + hash(key: string): size_t
  }
  
  class HashFactory {
    + {static} createHashFunction(type: string, param: int): shared_ptr<IHashFunction>
  }
}

package Command {
  interface ICommand {
    + ~ICommand(std::string& arg)
    + execute(): bool
  }
  
  class PostItemCommand {
    - filter: shared_ptr<IFilter>
    - item: string
    + PostItemCommand(filter, url)
    + execute(): bool
  }
  
  class GetItemCommand {
    - filter: shared_ptr<IFilter>
    - item: string
    + GetItemCommand(filter, url)
    + execute(): bool
  }
  
  class DeleteItemCommand {
    - filter: shared_ptr<IFilter>
    - item: string
    + DeleteItemCommand(filter, url)
    + execute(): bool
  }
}

package Menu {
  interface IMenu {
    + ~IMenu()
    + getCommand(commandId: int&, arg: string&): void
  }
  
  class ConsoleMenu {
    - reader: InputReader&
    - writer: OutputWriter&
    + ConsoleMenu(reader: InputReader&, writer: OutputWriter&)
    + getCommand(commandId: int&, arg: string&): void
  }
}

package Input {
  interface InputReader {
    + ~InputReader()
    + readLine(): string
  }
  
  class CliReader {
    + readLine(): string
  }
  
  class TCPReader {
    - ip: string
    - port: string
    + readLine(): string
  }

  class FileReader {
    - filePath: string
    + FileReader(filePath)
    + readLine(): string
  }
}

package Validator {
  interface Ivalidator {
    + ~Ivalidator()
    + validate(str: string): bool
  }
  
  class UrlValidator {
    + validate(url: string): bool
    - isValidProtocol(protocol: string): bool
    - isValidDomain(domain: string): bool
  }
  
  class StringValidator {
    + {static} validatePositiveIntegers(args: vector<int>): bool
  }
}

package FileManager {
  interface IFileManager {
    + ~IFileManager()
    + save(object: void*): void
    + load(object: void*): void
  }
  
  class BloomFilterFileManager {
    - filePath: string
    + BloomFilterFileManager(directory: string)
    + save(object: void*): void
    + load(object: void*): void
  }
}

package Output {
  interface OutputWriter {
    + ~OutputWriter()
    + putLine(line: string): bool
  }
  
  class CLIPrinter {
    + CLIPrinter()
    + putLine(line: string): bool
  }
  
  class FileWriter {
    - out: ofstream
    + FileWriter(filePath: string)
    + putLine(line: string): bool
  }
}

' Inheritance relationships
IFilter <|.. BloomFilter
IHashFunction <|.. StdHash
ICommand <|.. PostItemCommand
ICommand <|.. GetItemCommand
ICommand <|.. DeleteItemCommand
IMenu <|.. ConsoleMenu
InputReader <|.. CliReader
InputReader <|.. FileReader
InputReader <|.. TCPReader
Ivalidator <|.. UrlValidator
IFileManager <|.. BloomFilterFileManager
OutputWriter <|.. CLIPrinter
OutputWriter <|.. FileWriter

' Composition & Dependency relationships
App o-- "1" IFilter
App o-- "1" IMenu
App o-- "*" ICommand
App ..> BloomFilter : creates >
App ..> StringValidator : uses >
App ..> HashFactory : uses >
BloomFilter o-- "*" IHashFunction
BloomFilter ..> FileManager : uses >
PostItemCommand --> IFilter : references >
GetItemCommand --> IFilter : references >
DeleteItemCommand --> IFilter : references >
ConsoleMenu --> InputReader : references >
ConsoleMenu --> OutputWriter : references >
BloomFilterFileManager --> BloomFilter : serializes >
HashFactory ..> IHashFunction : creates >

@enduml