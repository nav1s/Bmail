@startuml bmail

title Bmail Project - Class Diagram

package App {
  class App {
    - commands: map<int, function<void(const string&)>>
    - filter: shared_ptr<IFilter>
    - menu: shared_ptr<IMenu>
    - inputReader: shared_ptr<InputReader>
    - urlValidator: shared_ptr<UrlValidator>
    + App(filter, menu, inputReader, urlValidator)
    + ~App()
    + run()
    + registerCommand(type, commandFactoryFunc)
  }
}

package Filter {
  interface IFilter {
    + ~IFilter()
    + add(item: string): bool
    + delete(item: string): bool
    + isBlacklisted(item: string): bool
  }
  
  class BloomFilter {
    - bitArray: vector<bool>
    - hashFunctions: vector<shared_ptr<IHashFunction>>
    + BloomFilter(size, hashFunctions)
    + add(item: string): bool
    + delete(item: string): bool
    + isBlacklisted(item: string): bool
  }
}

package Hash {
  interface IHashFunction {
    + ~IHashFunction()
    + hash(key: string): size_t
  }
  
  class StdHash {
    - repetition: int
    + StdHash(repetition)
    + hash(key: string): size_t
  }
  
  class HashFactory {
    + {static} createHashFunction(type: string, param: int): shared_ptr<IHashFunction>
  }
}

package Command {
  interface ICommand {
    + ~ICommand()
    + execute(): bool
  }
  
  class PostItemCommand {
    - filter: shared_ptr<IFilter>
    - item: string
    + PostItemCommand(filter, url)
    + execute(): bool
  }
  
  class GetItemCommand {
    - filter: shared_ptr<IFilter>
    - item: string
    + GetItemCommand(filter, url)
    + execute(): bool
  }
  
  class DeleteItemCommand {
    - filter: shared_ptr<IFilter>
    - item: string
    + DeleteItemCommand(filter, url)
    + execute(): bool
  }
}

package Menu {
  interface IMenu {
    + ~IMenu()
    + display()
    + getUserChoice(): int
  }
  
  class ConsoleMenu {
    + display()
    + getUserChoice(): int
  }
}

package Input {
  interface InputReader {
    + ~InputReader()
    + readLine(): string
  }
  
  class CliReader {
    + readLine(): string
  }
  
  class TCPReader {
    - ip: string
    - port: string
    + readLine(): string
  }

  class FileReader {
    - filePath: string
    + FileReader(filePath)
    + readLine(): string
  }
}

package Validator {
  interface Ivalidator {
    + ~Ivalidator()
    + validate(str: string): bool
  }
  
  class UrlValidator {
    + validate(url: string): bool
    - isValidProtocol(protocol: string): bool
    - isValidDomain(domain: string): bool
  }
}

package Output {
  interface OutputWriter {
    + ~OutputWriter()
    + putLine(line: string): bool
  }
  
  class CLIPrinter {
    + CLIPrinter()
    + putLine(line: string): bool
  }
  
  class FileWriter {
    - out: ofstream
    + FileWriter(filePath: string)
    + putLine(line: string): bool
  }
}

' Inheritance relationships
IFilter <|.. BloomFilter
IHashFunction <|.. StdHash
ICommand <|.. PostItemCommand
ICommand <|.. GetItemCommand
ICommand <|.. DeleteItemCommand
IMenu <|.. ConsoleMenu
InputReader <|.. CliReader
InputReader <|.. FileReader
InputReader <|.. TCPReader
Ivalidator <|.. UrlValidator
OutputWriter <|.. CLIPrinter
OutputWriter <|.. FileWriter

' Composition & Dependency relationships
App o-- "1" IFilter
App o-- "1" IMenu
App o-- "1" InputReader
App o-- "1" OutputWriter
App o-- "1" UrlValidator
App ..> ICommand : creates >
BloomFilter o-- "*" IHashFunction
PostItemCommand --> IFilter : references >
GetItemCommand --> IFilter : references >
DeleteItemCommand --> IFilter : references >
HashFactory ..> IHashFunction : creates >

@enduml